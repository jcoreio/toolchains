{"version":3,"file":"index.js","names":["LOG_LEVEL_TRACE","exports","LOG_LEVEL_DEBUG","LOG_LEVEL_INFO","LOG_LEVEL_WARN","LOG_LEVEL_ERROR","LOG_LEVEL_FATAL","LOG_LEVEL_MIN","LOG_LEVEL_MAX","DEFAULT_LOG_LEVEL","PATH_SEPARATOR","logLevelToName","_logLevelToName","_defineProperty2","assertValidLogLevel","level","Error","concat","configuredLogLevels","envLogLevels","logLevelAtPath","path","envVar","varName","process","env","undefined","calcedEnvLogLevels","calcEnvLogLevels","_loop","logLevel","envForLevel","targetsForLevel","split","filter","Boolean","forEach","target","logLevelsCache","resetLogLevels","setLogLevel","calcLogLevel","levelAtExactPath","exactPathSplit","compareLen","length","subPath","slice","join","levelAtSubPath","levelForPath","hasDate","defaultLogFunctionProvider","console","error","log","_logFunctionProvider","setLogFunctionProvider","provider","formatDate","d","part","n","width","arguments","String","padStart","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","defaultLogFormat","loggerPath","date","Date","createDefaultLogProvider","logFunc","_len","args","Array","_key","apply","defaultLogProvider","_len2","_key2","_logProvider","setLogProvider","loggersByPath","LoggerImpl","_createClass2","_ref","_this","logProviders","_classCallCheck2","_len3","_key3","argsToLogger","resolvedArgs","isArray","_iterator","_createForOfIteratorHelper","_logProviders","_step","s","done","value","_toConsumableArray2","err","e","f","_len4","_key4","logAtLevel","_len5","_key5","_len6","_key6","_len7","_key7","_len8","_key8","_len9","_key9","_len10","_key10","createLogger","options","logger","_default"],"sources":["src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport type Level = 1 | 2 | 3 | 4 | 5 | 6\n\nexport interface Logger {\n  trace(...args: Array<any>): void\n  debug(...args: Array<any>): void\n  info(...args: Array<any>): void\n  warn(...args: Array<any>): void\n  error(...args: Array<any>): void\n  fatal(...args: Array<any>): void\n  logAtLevel(level: Level, ...args: Array<any>): void\n  levelEnabled(level: Level): boolean\n  inputLogProvider: LogProvider\n}\n\nexport type LogProvider = (\n  loggerPath: string,\n  level: Level,\n  ...args: Array<any>\n) => void\n\nexport type LogFunctionProvider = (level: Level) => (...args: any[]) => any\n\nexport const LOG_LEVEL_TRACE = 1\nexport const LOG_LEVEL_DEBUG = 2\nexport const LOG_LEVEL_INFO = 3\nexport const LOG_LEVEL_WARN = 4\nexport const LOG_LEVEL_ERROR = 5\nexport const LOG_LEVEL_FATAL = 6\n\nconst LOG_LEVEL_MIN = LOG_LEVEL_TRACE\nconst LOG_LEVEL_MAX = LOG_LEVEL_FATAL\n\nconst DEFAULT_LOG_LEVEL = LOG_LEVEL_INFO\n\nconst PATH_SEPARATOR = '.'\n\nexport const logLevelToName: {\n  1: 'TRACE'\n  2: 'DEBUG'\n  3: 'INFO'\n  4: 'WARN'\n  5: 'ERROR'\n  6: 'FATAL'\n} = {\n  [LOG_LEVEL_TRACE]: 'TRACE',\n  [LOG_LEVEL_DEBUG]: 'DEBUG',\n  [LOG_LEVEL_INFO]: 'INFO',\n  [LOG_LEVEL_WARN]: 'WARN',\n  [LOG_LEVEL_ERROR]: 'ERROR',\n  [LOG_LEVEL_FATAL]: 'FATAL',\n}\n\nfunction assertValidLogLevel(level: Level): void {\n  switch (level) {\n    case LOG_LEVEL_TRACE:\n    case LOG_LEVEL_DEBUG:\n    case LOG_LEVEL_INFO:\n    case LOG_LEVEL_WARN:\n    case LOG_LEVEL_ERROR:\n    case LOG_LEVEL_FATAL:\n      return\n    default:\n      throw new Error(`invalid log level: ${level}`)\n  }\n}\n\nconst configuredLogLevels: { [path: string]: Level } = {}\nconst envLogLevels: { [path: string]: Level } = {}\n\nconst logLevelAtPath = (path: string): Level | undefined =>\n  configuredLogLevels[path] || envLogLevels[path]\n\nconst envVar = (varName: string): string | undefined =>\n  typeof process !== 'undefined' && process.env\n    ? process.env[varName]\n    : undefined // eslint-disable-line no-undef\n\nlet calcedEnvLogLevels = false\nfunction calcEnvLogLevels(): void {\n  if (calcedEnvLogLevels) return\n  // walk log levels from least to most verbose, so that the most verbose setting wins if\n  // the user sets DEBUG=foo and TRACE=foo, foo will be set to TRACE\n  for (let logLevel = LOG_LEVEL_MAX; logLevel >= LOG_LEVEL_MIN; --logLevel) {\n    const envForLevel = envVar((logLevelToName as any)[logLevel])\n    if (envForLevel && typeof envForLevel === 'string') {\n      const targetsForLevel = envForLevel.split(',').filter(Boolean)\n      targetsForLevel.forEach((target: string) => {\n        envLogLevels[target] = logLevel as Level\n      })\n    }\n  }\n  calcedEnvLogLevels = true\n}\n\nlet logLevelsCache: { [path: string]: Level } = {}\n\nexport function resetLogLevels(): void {\n  logLevelsCache = {}\n  for (const path in configuredLogLevels) delete configuredLogLevels[path]\n}\n\nexport function setLogLevel(path: string, level: Level): void {\n  assertValidLogLevel(level)\n  if (level !== configuredLogLevels[path]) {\n    configuredLogLevels[path] = level\n    // Bust the cache\n    logLevelsCache = {}\n  }\n}\n\nfunction calcLogLevel(path: string): Level {\n  calcEnvLogLevels()\n  const levelAtExactPath: Level | undefined = logLevelAtPath(path)\n  if (levelAtExactPath != null) return levelAtExactPath\n  const exactPathSplit = path.split(PATH_SEPARATOR)\n  for (\n    let compareLen = exactPathSplit.length - 1;\n    compareLen >= 0;\n    --compareLen\n  ) {\n    const subPath = exactPathSplit.slice(0, compareLen).join(PATH_SEPARATOR)\n    const levelAtSubPath: Level | undefined = logLevelAtPath(subPath)\n    if (levelAtSubPath != null) return levelAtSubPath\n  }\n  return DEFAULT_LOG_LEVEL\n}\n\nfunction logLevel(path: string): Level {\n  let levelForPath: Level | undefined = logLevelsCache[path]\n  if (levelForPath == null) {\n    logLevelsCache[path] = levelForPath = calcLogLevel(path)\n  }\n  return levelForPath\n}\n\nconst hasDate = !envVar('LOG_NO_DATE')\n\nexport const defaultLogFunctionProvider: LogFunctionProvider = (level: Level) =>\n  level >= LOG_LEVEL_ERROR ? console.error : console.log // eslint-disable-line no-console\n\nlet _logFunctionProvider: LogFunctionProvider = defaultLogFunctionProvider\n\n/**\n * Simple hook to override the logging function. For example, to always log to console.error,\n * call setLogFunctionProvider(() => console.error)\n * @param provider function that returns the log function based on the message's log level\n */\nexport function setLogFunctionProvider(provider: LogFunctionProvider): void {\n  _logFunctionProvider = provider\n}\n\nfunction formatDate(d: Date): string {\n  function part(n: number, width = 2): string {\n    return String(n).padStart(width, '0')\n  }\n  return `${part(d.getFullYear(), 4)}-${part(d.getMonth() + 1)}-${part(\n    d.getDate()\n  )} ${part(d.getHours())}:${part(d.getMinutes())}:${part(d.getSeconds())}`\n}\n\nfunction defaultLogFormat(loggerPath: string, level: Level): string {\n  const date = hasDate ? formatDate(new Date()) + ' ' : ''\n  return `[${date}${loggerPath}] ${(logLevelToName as any)[level]}`\n}\n\nexport function createDefaultLogProvider(\n  logFunc: (...args: any[]) => any\n): LogProvider {\n  return (loggerPath: string, level: Level, ...args: Array<any>): void => {\n    logFunc(defaultLogFormat(loggerPath, level), ...args)\n  }\n}\n\nexport const defaultLogProvider: LogProvider = (\n  loggerPath: string,\n  level: Level,\n  ...args: Array<any>\n) => {\n  const logFunc = _logFunctionProvider(level)\n  logFunc(defaultLogFormat(loggerPath, level), ...args)\n}\n\nlet _logProvider: LogProvider = defaultLogProvider\n\n/**\n * Hook to provide a complete replacement for the log provider.\n * @param provider\n */\nexport function setLogProvider(provider: LogProvider): void {\n  _logProvider = provider\n}\n\nconst loggersByPath: { [loggerPath: string]: Logger } = {}\n\nclass LoggerImpl implements Logger {\n  loggerPath: string\n  _logProviders: LogProvider[] | undefined\n\n  constructor({ loggerPath, logProviders }: CreateLoggerOptions) {\n    this.loggerPath = loggerPath\n    this._logProviders = logProviders\n  }\n\n  logAtLevel = (level: Level, ...args: Array<any>): void => {\n    if (level >= logLevel(this.loggerPath)) {\n      let argsToLogger: Array<any> = args\n      if (args.length === 1 && typeof args[0] === 'function') {\n        // A single function was passed. Execute that function and log the result.\n        // This allows debug text to only be calculated when the relevant debug level is\n        // enabled, e.g. log.trace(() => JSON.stringify(data))\n        const resolvedArgs = args[0]()\n        argsToLogger = Array.isArray(resolvedArgs)\n          ? resolvedArgs\n          : [resolvedArgs]\n      }\n      for (const provider of this._logProviders || [_logProvider]) {\n        provider(this.loggerPath, level, ...argsToLogger)\n      }\n    }\n  }\n  levelEnabled = (level: number): boolean => {\n    return level >= logLevel(this.loggerPath)\n  }\n  inputLogProvider: LogProvider = (\n    loggerPath: string,\n    level: Level,\n    ...args: Array<any>\n  ): void => {\n    this.logAtLevel(level, ...args)\n  }\n  trace = (...args: Array<any>): void => {\n    this.logAtLevel(LOG_LEVEL_TRACE, ...args)\n  }\n  debug = (...args: Array<any>): void => {\n    this.logAtLevel(LOG_LEVEL_DEBUG, ...args)\n  }\n  info = (...args: Array<any>): void => {\n    this.logAtLevel(LOG_LEVEL_INFO, ...args)\n  }\n  warn = (...args: Array<any>): void => {\n    this.logAtLevel(LOG_LEVEL_WARN, ...args)\n  }\n  error = (...args: Array<any>): void => {\n    this.logAtLevel(LOG_LEVEL_ERROR, ...args)\n  }\n  fatal = (...args: Array<any>): void => {\n    this.logAtLevel(LOG_LEVEL_FATAL, ...args)\n  }\n}\n\nexport type CreateLoggerOptions = {\n  loggerPath: string\n  logProviders?: LogProvider[]\n}\n\nexport function createLogger(options: CreateLoggerOptions): Logger {\n  return new LoggerImpl(options)\n}\n\nexport function logger(loggerPath = ''): Logger {\n  let logger = loggersByPath[loggerPath]\n  if (!logger) logger = loggersByPath[loggerPath] = createLogger({ loggerPath })\n  return logger\n}\n\nexport default logger\n"],"mappings":"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"}
