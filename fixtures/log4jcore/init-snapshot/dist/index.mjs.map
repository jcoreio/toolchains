{"version":3,"file":"index.mjs","names":["LOG_LEVEL_TRACE","LOG_LEVEL_DEBUG","LOG_LEVEL_INFO","LOG_LEVEL_WARN","LOG_LEVEL_ERROR","LOG_LEVEL_FATAL","LOG_LEVEL_MIN","LOG_LEVEL_MAX","DEFAULT_LOG_LEVEL","PATH_SEPARATOR","logLevelToName","assertValidLogLevel","level","Error","configuredLogLevels","envLogLevels","logLevelAtPath","path","envVar","varName","process","env","undefined","calcedEnvLogLevels","calcEnvLogLevels","logLevel","envForLevel","targetsForLevel","split","filter","Boolean","forEach","target","logLevelsCache","resetLogLevels","setLogLevel","calcLogLevel","levelAtExactPath","exactPathSplit","compareLen","length","subPath","slice","join","levelAtSubPath","levelForPath","hasDate","defaultLogFunctionProvider","console","error","log","_logFunctionProvider","setLogFunctionProvider","provider","formatDate","d","part","n","width","String","padStart","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","defaultLogFormat","loggerPath","date","Date","createDefaultLogProvider","logFunc","args","defaultLogProvider","_logProvider","setLogProvider","loggersByPath","LoggerImpl","_logProviders","constructor","logProviders","logAtLevel","argsToLogger","resolvedArgs","Array","isArray","levelEnabled","inputLogProvider","trace","debug","info","warn","fatal","createLogger","options","logger"],"sources":["src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport type Level = 1 | 2 | 3 | 4 | 5 | 6\n\nexport interface Logger {\n  trace(...args: Array<any>): void\n  debug(...args: Array<any>): void\n  info(...args: Array<any>): void\n  warn(...args: Array<any>): void\n  error(...args: Array<any>): void\n  fatal(...args: Array<any>): void\n  logAtLevel(level: Level, ...args: Array<any>): void\n  levelEnabled(level: Level): boolean\n  inputLogProvider: LogProvider\n}\n\nexport type LogProvider = (\n  loggerPath: string,\n  level: Level,\n  ...args: Array<any>\n) => void\n\nexport type LogFunctionProvider = (level: Level) => (...args: any[]) => any\n\nexport const LOG_LEVEL_TRACE = 1\nexport const LOG_LEVEL_DEBUG = 2\nexport const LOG_LEVEL_INFO = 3\nexport const LOG_LEVEL_WARN = 4\nexport const LOG_LEVEL_ERROR = 5\nexport const LOG_LEVEL_FATAL = 6\n\nconst LOG_LEVEL_MIN = LOG_LEVEL_TRACE\nconst LOG_LEVEL_MAX = LOG_LEVEL_FATAL\n\nconst DEFAULT_LOG_LEVEL = LOG_LEVEL_INFO\n\nconst PATH_SEPARATOR = '.'\n\nexport const logLevelToName: {\n  1: 'TRACE'\n  2: 'DEBUG'\n  3: 'INFO'\n  4: 'WARN'\n  5: 'ERROR'\n  6: 'FATAL'\n} = {\n  [LOG_LEVEL_TRACE]: 'TRACE',\n  [LOG_LEVEL_DEBUG]: 'DEBUG',\n  [LOG_LEVEL_INFO]: 'INFO',\n  [LOG_LEVEL_WARN]: 'WARN',\n  [LOG_LEVEL_ERROR]: 'ERROR',\n  [LOG_LEVEL_FATAL]: 'FATAL',\n}\n\nfunction assertValidLogLevel(level: Level): void {\n  switch (level) {\n    case LOG_LEVEL_TRACE:\n    case LOG_LEVEL_DEBUG:\n    case LOG_LEVEL_INFO:\n    case LOG_LEVEL_WARN:\n    case LOG_LEVEL_ERROR:\n    case LOG_LEVEL_FATAL:\n      return\n    default:\n      throw new Error(`invalid log level: ${level}`)\n  }\n}\n\nlet configuredLogLevels: { [path in string]?: Level } = {}\nconst envLogLevels: { [path in string]?: Level } = {}\n\nconst logLevelAtPath = (path: string): Level | undefined =>\n  configuredLogLevels[path] || envLogLevels[path]\n\nconst envVar = (varName: string): string | undefined =>\n  typeof process !== 'undefined' && process.env // eslint-disable-line @typescript-eslint/no-unnecessary-condition\n    ? process.env[varName] // eslint-disable-line @typescript-eslint/no-unnecessary-condition\n    : undefined // eslint-disable-line no-undef\n\nlet calcedEnvLogLevels = false\nfunction calcEnvLogLevels(): void {\n  if (calcedEnvLogLevels) return\n  // walk log levels from least to most verbose, so that the most verbose setting wins if\n  // the user sets DEBUG=foo and TRACE=foo, foo will be set to TRACE\n  for (let logLevel = LOG_LEVEL_MAX; logLevel >= LOG_LEVEL_MIN; --logLevel) {\n    const envForLevel = envVar((logLevelToName as any)[logLevel])\n    if (envForLevel && typeof envForLevel === 'string') {\n      const targetsForLevel = envForLevel.split(',').filter(Boolean)\n      targetsForLevel.forEach((target: string) => {\n        envLogLevels[target] = logLevel as Level\n      })\n    }\n  }\n  calcedEnvLogLevels = true\n}\n\nlet logLevelsCache: { [path in string]?: Level } = {}\n\nexport function resetLogLevels(): void {\n  logLevelsCache = {}\n  configuredLogLevels = {}\n}\n\nexport function setLogLevel(path: string, level: Level): void {\n  assertValidLogLevel(level)\n  if (level !== configuredLogLevels[path]) {\n    configuredLogLevels[path] = level\n    // Bust the cache\n    logLevelsCache = {}\n  }\n}\n\nfunction calcLogLevel(path: string): Level {\n  calcEnvLogLevels()\n  const levelAtExactPath: Level | undefined = logLevelAtPath(path)\n  if (levelAtExactPath != null) return levelAtExactPath\n  const exactPathSplit = path.split(PATH_SEPARATOR)\n  for (\n    let compareLen = exactPathSplit.length - 1;\n    compareLen >= 0;\n    --compareLen\n  ) {\n    const subPath = exactPathSplit.slice(0, compareLen).join(PATH_SEPARATOR)\n    const levelAtSubPath: Level | undefined = logLevelAtPath(subPath)\n    if (levelAtSubPath != null) return levelAtSubPath\n  }\n  return DEFAULT_LOG_LEVEL\n}\n\nfunction logLevel(path: string): Level {\n  let levelForPath: Level | undefined = logLevelsCache[path]\n  if (levelForPath == null) {\n    logLevelsCache[path] = levelForPath = calcLogLevel(path)\n  }\n  return levelForPath\n}\n\nconst hasDate = !envVar('LOG_NO_DATE')\n\nexport const defaultLogFunctionProvider: LogFunctionProvider = (\n  level: Level\n) => (level >= LOG_LEVEL_ERROR ? console.error : console.log) // eslint-disable-line no-console\n\nlet _logFunctionProvider: LogFunctionProvider = defaultLogFunctionProvider\n\n/**\n * Simple hook to override the logging function. For example, to always log to console.error,\n * call setLogFunctionProvider(() => console.error)\n * @param provider function that returns the log function based on the message's log level\n */\nexport function setLogFunctionProvider(provider: LogFunctionProvider): void {\n  _logFunctionProvider = provider\n}\n\nfunction formatDate(d: Date): string {\n  function part(n: number, width = 2): string {\n    return String(n).padStart(width, '0')\n  }\n  return `${part(d.getFullYear(), 4)}-${part(d.getMonth() + 1)}-${part(\n    d.getDate()\n  )} ${part(d.getHours())}:${part(d.getMinutes())}:${part(d.getSeconds())}`\n}\n\nfunction defaultLogFormat(loggerPath: string, level: Level): string {\n  const date = hasDate ? formatDate(new Date()) + ' ' : ''\n  return `[${date}${loggerPath}] ${(logLevelToName as any)[level]}`\n}\n\nexport function createDefaultLogProvider(\n  logFunc: (...args: any[]) => any\n): LogProvider {\n  return (loggerPath: string, level: Level, ...args: Array<any>): void => {\n    logFunc(defaultLogFormat(loggerPath, level), ...args)\n  }\n}\n\nexport const defaultLogProvider: LogProvider = (\n  loggerPath: string,\n  level: Level,\n  ...args: Array<any>\n) => {\n  const logFunc = _logFunctionProvider(level)\n  logFunc(defaultLogFormat(loggerPath, level), ...args)\n}\n\nlet _logProvider: LogProvider = defaultLogProvider\n\n/**\n * Hook to provide a complete replacement for the log provider.\n * @param provider\n */\nexport function setLogProvider(provider: LogProvider): void {\n  _logProvider = provider\n}\n\nconst loggersByPath: { [loggerPath in string]?: Logger } = {}\n\nclass LoggerImpl implements Logger {\n  loggerPath: string\n  _logProviders: LogProvider[] | undefined\n\n  constructor({ loggerPath, logProviders }: CreateLoggerOptions) {\n    this.loggerPath = loggerPath\n    this._logProviders = logProviders\n  }\n\n  logAtLevel = (level: Level, ...args: Array<any>): void => {\n    if (level >= logLevel(this.loggerPath)) {\n      let argsToLogger: Array<any> = args\n      if (args.length === 1 && typeof args[0] === 'function') {\n        // A single function was passed. Execute that function and log the result.\n        // This allows debug text to only be calculated when the relevant debug level is\n        // enabled, e.g. log.trace(() => JSON.stringify(data))\n        const resolvedArgs = args[0]()\n        argsToLogger = Array.isArray(resolvedArgs)\n          ? resolvedArgs\n          : [resolvedArgs]\n      }\n      for (const provider of this._logProviders || [_logProvider]) {\n        provider(this.loggerPath, level, ...argsToLogger)\n      }\n    }\n  }\n  levelEnabled = (level: number): boolean => {\n    return level >= logLevel(this.loggerPath)\n  }\n  inputLogProvider: LogProvider = (\n    loggerPath: string,\n    level: Level,\n    ...args: Array<any>\n  ): void => {\n    this.logAtLevel(level, ...args)\n  }\n  trace = (...args: Array<any>): void => {\n    this.logAtLevel(LOG_LEVEL_TRACE, ...args)\n  }\n  debug = (...args: Array<any>): void => {\n    this.logAtLevel(LOG_LEVEL_DEBUG, ...args)\n  }\n  info = (...args: Array<any>): void => {\n    this.logAtLevel(LOG_LEVEL_INFO, ...args)\n  }\n  warn = (...args: Array<any>): void => {\n    this.logAtLevel(LOG_LEVEL_WARN, ...args)\n  }\n  error = (...args: Array<any>): void => {\n    this.logAtLevel(LOG_LEVEL_ERROR, ...args)\n  }\n  fatal = (...args: Array<any>): void => {\n    this.logAtLevel(LOG_LEVEL_FATAL, ...args)\n  }\n}\n\nexport type CreateLoggerOptions = {\n  loggerPath: string\n  logProviders?: LogProvider[]\n}\n\nexport function createLogger(options: CreateLoggerOptions): Logger {\n  return new LoggerImpl(options)\n}\n\nexport function logger(loggerPath = ''): Logger {\n  let logger = loggersByPath[loggerPath]\n  if (!logger) logger = loggersByPath[loggerPath] = createLogger({ loggerPath })\n  return logger\n}\n\nexport default logger\n"],"mappings":"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","ignoreList":[]}
