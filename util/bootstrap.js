#!/usr/bin/env node

const spawn = require('./spawn')
const path = require('path')
const fs = require('fs-extra')
const _glob = require('glob')
const { promisify } = require('util')
const semver = require('semver')
const findUsedPackages = require('./findUsedPackages')
const toolchainPackageJson = require('../package.json')
const toolchainName = toolchainPackageJson.name
const toolchainDeps = new Set(Object.keys(toolchainPackageJson.dependencies))
const glob = promisify(_glob)

const content = path.resolve(__dirname, '..', 'content')
const circleciConfigYml = path.join('.circleci', 'config.yml')

function merge(src, more) {
  if (!(src instanceof Object)) return more
  let changed = false
  for (const key in more) {
    const merged = merge(src[key], more[key])
    if (src[key] !== merged) {
      if (!changed) src = { ...src }
      changed = true
      src[key] = merged
    }
  }
  return src
}

function without(src, ...keys) {
  let changed = false
  for (const key of keys) {
    if (src[key]) {
      if (!changed) src = { ...src }
      changed = true
      delete src[key]
    }
  }
  return src
}

async function bootstrap({ hard } = {}) {
  if (hard) {
    await Promise.all([
      fs.remove('.babelrc'),
      fs.remove('.babelrc.js'),
      fs.remove('.eslintrc'),
      fs.remove('.eslintrc.js'),
      fs.remove('.prettierrc'),
      fs.remove('.prettierrc.js'),
      fs.remove('.prettierrc.json'),
      fs.remove('.npmignore'),
      fs.remove('.gitignore'),
      fs.remove('commitlint.config.js'),
      fs.remove('lint-staged.config.js'),
      fs.remove('.nyc.config.js'),
    ])
  }

  async function writeConfig(file, content) {
    const current = await fs.readFile(file, 'utf8').catch((err) => {
      if (err.code !== 'ENOENT') throw err
      return ''
    })
    if (hard || current.indexOf(toolchainName) < 0) {
      await fs.writeFile(file, content, 'utf8')
      console.log('wrote', file) // eslint-disable-line no-console
    }
  }
  await writeConfig(
    '.eslintrc.js',
    `/* eslint-env node */
module.exports = {
  extends: [require.resolve('@jedwards1211/js-toolchain/.eslintrc.js')],
}
`
  )
  await writeConfig(
    '.prettierrc.js',
    `/* eslint-env node */
module.exports = {
  ...require('${toolchainName}/.prettierrc.js'),
}
`
  )
  await writeConfig(
    '.babelrc.js',
    `/* eslint-env node */
module.exports = function (api) {
  return require('${toolchainName}/.babelrc.js')(api)
}
`
  )

  await fs.mkdirs('.circleci')

  const circleciConfig = await fs
    .readFile(circleciConfigYml, 'utf8')
    .catch((err) => {
      if (err.code !== 'ENOENT') throw err
      return null
    })
  if (
    hard ||
    !circleciConfig ||
    new RegExp(`auto-generated by ${toolchainName}`).test(circleciConfig)
  ) {
    await fs.copyFile(path.join(content, 'config.yml'), circleciConfigYml)
    console.log('wrote', circleciConfigYml) // eslint-disable-line no-console
  }

  const packageJson = await fs.readJson('package.json')
  let updatedPackageJson = packageJson
  if (hard) {
    updatedPackageJson = without(
      updatedPackageJson,
      'main',
      'module',
      'exports',
      'husky',
      'renovate',
      'prettier',
      'lint-staged',
      'commitlint',
      'eslintConfig',
      'files',
      'renovate'
    )
    if (updatedPackageJson.config) {
      updatedPackageJson = merge(updatedPackageJson, {
        config: without(updatedPackageJson.config, 'mocha'),
      })
    }
  }
  updatedPackageJson = merge(updatedPackageJson, {
    version: '0.0.0-development',
    sideEffects: false,
    husky: {
      hooks: {
        'prepare-commit-msg': 'exec < /dev/tty && git cz --hook || true',
        'pre-commit': 'toolchain pre-commit',
        'commit-msg': 'toolchain commitlint -E HUSKY_GIT_PARAMS',
      },
    },
    scripts: {
      tc: 'toolchain',
      toolchain: 'toolchain',
      test: 'toolchain test',
      prepublishOnly:
        'echo This package is meant to be published by semantic-release from the dist build directory. && exit 1',
    },
    config: {
      commitizen: { path: 'cz-conventional-changelog' },
    },
  })
  if (updatedPackageJson !== packageJson) {
    await fs.writeJson('package.json', updatedPackageJson, { spaces: 2 })
    console.log('wrote package.json') // eslint-disable-line no-console
  }
  if (!packageJson.devDependencies) packageJson.devDependencies = {}

  const gitignore = (
    await fs.readFile('.gitignore', 'utf8').catch((err) => {
      if (err.code !== 'ENOENT') throw err
      return ''
    })
  ).split(/\r\n?|\n/gm)

  let gitignoreChanged = false
  for (const entry of ['coverage', '.nyc_output', 'node_modules', 'dist']) {
    if (!gitignore.includes(entry)) {
      gitignoreChanged = true
      gitignore.push(entry)
    }
  }
  if (gitignoreChanged) {
    await fs.writeFile('.gitignore', gitignore.join('\n'), 'utf8')
    console.log('wrote .gitignore') // eslint-disable-line no-console
  }

  const usedPackages = await findUsedPackages(
    await glob('{src,test}/**.{js,cjs,mjs}')
  )
  usedPackages.add(toolchainName)
  usedPackages.add('flow-bin')
  usedPackages.add('typescript')

  const depsToRemove = Object.keys(packageJson.devDependencies).filter(
    (dep) =>
      (!usedPackages.has(dep) ||
        toolchainDeps.has(dep) ||
        toolchainDeps.has(dep.replace(/^babel-/, '@babel/'))) &&
      dep !== 'husky'
  )
  if (depsToRemove.length) {
    console.log(`removing unnecessary devDependencies...`) // eslint-disable-line no-console
    await spawn('yarn', ['remove', ...depsToRemove])
  }

  if (
    !packageJson.devDependencies.husky ||
    !semver.satisfies(
      packageJson.devDependencies.husky.replace(/^\^/, ''),
      toolchainPackageJson.dependencies.husky
    )
  ) {
    console.log(`installing husky...`) // eslint-disable-line no-console
    await spawn('yarn', [
      'add',
      '--dev',
      `husky@${toolchainPackageJson.dependencies.husky}`,
    ])
  }

  await spawn(require.resolve('../bin/toolchain.js'), ['format'], {
    shell: true,
  })
}

module.exports = bootstrap

if (require.main === module)
  bootstrap({ hard: process.argv.indexOf('--hard') >= 0 })
